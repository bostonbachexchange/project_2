const express = require('express')
// making a router
const router = express.Router()
// importing Assignment model to access database
const Assignment = require('../models/assignment')

// DELETE - Delete
// router.delete('/:id', (req, res) => {
//     const fruitId = req.params.id

//     Fruit.findByIdAndRemove(fruitId)
//         .then(fruit => {
//             res.redirect('/fruits')
//         })
//         .catch(err => {
//             res.json(err)
//         })
// })

// GET route for displaying an update form
router.get('/:id/edit', (req, res) => {
    const assignmentId = req.params.id

    Assignment.findById(assignmentId)
        .then(assignment => {
            res.render('assignment/edit', { assignment })
        })
        .catch(err => {
            res.json(err)
        })
})

// PUT - Update
router.put('/:id', (req, res) => {
    const fruitId = req.params.id

    Assignment.findByIdAndUpdate(fruitId, req.body, { new: true })
        .then(fruit => {
            res.redirect(`/fruits/${fruit._id}`)
        })
        .catch(err => {
            res.json(err)
        })
})

// GET route for displaying my form for create
router.get('/new', (req, res) => {
    // idk const username = req.session.username
    // idk const logginIn = req.session.loggedIn
    res.render('assignment/new')
    // res.render('fruits/new', {username, loggedIn})
})

// POST - Create
router.post('/', (req, res) => {
    // now that we have user specific fruits, we'll add a username upon creation
    // remember, when we login, we saved the username to the session object
    // using the ._id to set the owner field
    req.body.username = req.session.username

    Assignment.create(req.body)
        .then(assignment => {
            console.log(assignment)
            // res.json(fruit)
            res.redirect('/assignments')
        })
        .catch(err => {
            res.json(err)
        })
})

// GET - /assignment
// localhost:3000/assignment/index
router.get('/', (req, res) => {
    // mongoose to find all fruits
    Assignment.find({})
    // return fruits as json
        .then(assignments => {
            // res.json(assignment)
            res.render('assignment/index', { assignments })
        })
        .catch(err => {
            res.json(err)
        })
})

//  router.get('/mine', (req, res) => {
//      // find the fruits associated with the logged in user
//     Assignment.find({ username: req.session.username })
//         .then(assignments => {
//             res.render('main/home', { assignments })
//         })
//         .catch(error => {
//             console.log(error)
//             res.json({ error })
//         })
// })

// seed route has been moved to models/seed.js
// insert many items into our database with just going to this route
// localhost:3000/main/seed
router.get('/seed', (req, res) => {
    const startAssignments = [
        { teacher: "Beethoven", date: "07/13/2022", technique: "C Major Scale", notes: 'memorize, one octave, hands separate' },
        { teacher: "Beethoven", date: "07/13/2022", technique: "G, C Major Scales", notes: 'memorize, one octave, hands separate' },
        { teacher: "Beethoven", date: "07/13/2022", technique: "D, G, C Major Scales", notes: 'memorize, one octave, hands separate' },
        { teacher: "Beethoven", date: "07/13/2022", technique: "A, D, G, C Major Scales", notes: 'memorize, one octave, hands separate' },
        { teacher: "Beethoven", date: "07/13/2022", technique: "E, A, D, G, C Major Scales", notes: 'memorize, one octave, hands separate' },
        { teacher: "Beethoven", date: "07/13/2022", technique: "B, E, A, D, G, C Major Scales", notes: 'memorize, one octave, hands separate' },
        { teacher: "Beethoven", date: "07/13/2022", technique: "F, B, E, A, D, G, C Major Scales", notes: 'memorize, one octave, hands separate' },
        { teacher: "Beethoven", date: "07/13/2022", technique: "C#, F, B, E, A, D, G, C Major Scales", notes: 'memorize, one octave, hands separate' },
        { teacher: "Beethoven", date: "07/13/2022", technique: "Eb, C#, F, B, E, A, D, G, C Major Scales", notes: 'memorize, one octave, hands separate' },
        { teacher: "Beethoven", date: "07/13/2022", technique: "Bb, Eb, C#, F, B, E, A, D, G, C Major Scales", notes: 'memorize, one octave, hands separate' },
        { teacher: "Beethoven", date: "07/13/2022", technique: "Ab, Eb, C#, F, B, E, A, D, G, C Major Scales", notes: 'memorize, one octave, hands separate' },
    ]

  // delete if we have fruits
  Assignment.deleteMany({})
		// insert data
		.then(() => {
            Assignment.create(startAssignments)
            // return this data as json to view
            .then(data => {
                res.json(data)
            })
            // .catch(err => console.error(err))
		    .catch(console.error)
        })
})

// GET - Show
// localhost:3000/fruits/:id <- change with the id being passed in
router.get('/:id', (req, res) => {
    const assignmentId = req.params.id

    Assignment.findById(assignmentId)
    // populate our User models fields
    // comment has an author field and that is the ref to the User model
    // always going to be a string of the value you want to populate
    // this also has to be another model
        //.populate('comments.author')
        // send back some json
        .then(assignment => {
        //   res.json(assignment)
        //     const userId = req.session.userId
        //     const username = req.session.username
             res.render('assignment/show', { assignment})
         })
        .catch(err => {
            res.json(err)
        })
})

module.exports = router
