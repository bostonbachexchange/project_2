const express = require('express')
// making a router
const router = express.Router()
// importing Assignment model to access database
const Assignment = require('../models/assignment')
const Scale = require('../models/scale')

// Do I need this?
const User = require('../models/user')

const { route } = require('./user_routes')

// DELETE - Delete
 router.delete('/:id', (req, res) => {
     const assignmentId = req.params.id

     Assignment.findByIdAndRemove(assignmentId)
         .then(() => {
             res.redirect('/assignments/index')
         })
         .catch(err => {
             res.json(err)
         })
 })

// GET route for displaying an update form
router.get('/:id/edit', (req, res) => {
    const assignmentId = req.params.id
    const loggedIn = req.session.loggedIn
    const displayName = req.session.username
    console.log('hello world')
    console.log('displayName??', displayName)
        if (req.session.loggedIn) {
        Assignment.findById(assignmentId)
            .then(assignment => {
                res.render('assignment/edit', { assignment, loggedIn, displayName })
            })
            .catch(err => {
                res.json(err)
            })
        } else {
            res.redirect("/users/login")
        }
        })

// PUT - Update
router.put('/:id', (req, res) => {
    const assignmentId = req.params.id
    Assignment.findByIdAndUpdate(assignmentId, req.body, { new: true })
        .then(assignment => {
            console.log(`${assignment._id}`);
            res.redirect(`/assignments/${assignment._id}`)
        })
        .catch(err => {
            res.json(err)
        })
})

// GET route for displaying my form for create
router.get('/new', (req, res) => {
    // idk const username = req.session.username
    // idk const logginIn = req.session.loggedIn
    console.log("req.session /new", req.session.loggedIn)
    const loggedIn = req.session.loggedIn
    const displayName = req.session.username
    console.log("loggedIn", loggedIn)
    if (req.session.loggedIn) {
        res.render('assignment/new', { loggedIn, displayName})
    } else {
        res.redirect("/users/login")
    }
})

// POST - Create
router.post('/', (req, res) => {
    // now that we have user specific fruits, we'll add a username upon creation
    // remember, when we login, we saved the username to the session object
    // using the ._id to set the owner field
    req.body.username = req.session.username
    //req.body.session
    Assignment.create(req.body)
        .then(assignment => {
            console.log(assignment)
            // res.json(fruit)
            res.redirect('/assignments')
        })
        .catch(err => {
            res.json(err)
        })
})

// GET - /home
router.get('/home', (req, res) => {
    console.log("req.session /home", req.session.loggedIn)
    const loggedIn = req.session.loggedIn
    const displayName = req.session.username
    console.log("loggedIn /", loggedIn)   
    if (req.session.loggedIn) {
        res.render('assignment/home', { loggedIn, displayName })
    } else {
        res.redirect("/users/login")
    }
})

// GET - /assignments
// localhost:3000/assignment/index
router.get('/', (req, res) => {
    //req.body.session = req.body.session
    console.log("req.session /", req.session.loggedIn)
    const loggedIn = req.session.loggedIn
    const displayName = req.session.username
    console.log("loggedIn /", loggedIn)
    if (req.session.loggedIn) {
    // mongoose to find all assignments
    Assignment.find({})
    // return fruits as json
        .then(assignments => {
            // res.json(assignment)
            //res.render('assignment/index', { assignments })
            res.render('assignment/home', { assignments, loggedIn, displayName })
        })
        .catch(err => {
            res.json(err)
        })
    } else {
        res.redirect("/users/login")
    }
})
// GET - users's assignments
router.get('/index', (req, res) => {
    // mongoose to find all fruits
    console.log("req.session", req.session.loggedIn)
    const loggedIn = req.session.loggedIn
    const displayName = req.session.username
    console.log("req.session /", loggedIn)
    if (req.session.loggedIn) {
        //Assignment.find({"teacher": "Beethoven"}).sort({date: -1})
        Assignment.find({username: req.session.username}).sort({date: -1})
            .then(assignments => {
                res.render('assignment/index', { assignments, loggedIn, displayName })
            })
            .catch(err => {
                res.json(err)
            })
        } else {
            res.redirect("/users/login")
        }
    })

    // GET - studio assignments page
router.get('/studio', (req, res) => {
    // mongoose to find all fruits
    console.log("req.session", req.session.loggedIn)
    const loggedIn = req.session.loggedIn
    const displayName = req.session.username
    console.log("req.session /", loggedIn)
    if (req.session.loggedIn) {
        Assignment.find({"teacher": "Beethoven"}).sort({date: -1})
        //Assignment.find({username: req.session.username}).sort({date: -1})
            .then(assignments => {
                res.render('assignment/index', { assignments, loggedIn, displayName })
            })
            .catch(err => {
                res.json(err)
            })
        } else {
            res.redirect("/users/login")
        }
    })

    // SCALES
router.get('/scales', (req, res) => {
    // mongoose to find all fruits
    console.log("req.session", req.session.loggedIn)
    const loggedIn = req.session.loggedIn
    const displayName = req.session.username
    console.log("req.session /", loggedIn)
    if (req.session.loggedIn) {
        // Scale.find({}).sort({numberOfAccidentals: 1})
        Scale.find().sort({numberOfAccidentals: 1})
        //Assignment.find({username: req.session.username}).sort({date: -1})
            .then(scales => {
                res.render('assignment/scalesIndex', { scales, loggedIn, displayName })
            })
            .catch(err => {
                res.json(err)
            })
        } else {
            res.redirect("/users/login")
        }
    })

//  router.get('/mine', (req, res) => {
//      // find the fruits associated with the logged in user
//     Assignment.find({ username: req.session.username })
//         .then(assignments => {
//             res.render('main/home', { assignments })
//         })
//         .catch(error => {
//             console.log(error)
//             res.json({ error })
//         })
// })

// seed route has been moved to models/seed.js
// npm run seed


// GET - Show
// localhost:3000/assignments/:id <- change with the id being passed in
router.get('/:id', (req, res) => {
    const assignmentId = req.params.id
    const loggedIn = req.session.loggedIn
    const displayName = req.session.username
    Assignment.findById(assignmentId)
        .then(assignment => {
        //   res.json(assignment)
        //     const userId = req.session.userId
        //     const username = req.session.username
             res.render('assignment/show', { assignment, loggedIn, displayName})
         })
        .catch(err => {
            res.json(err)
        })
})
// localhost:3000/assignments/:id <- change with the id being passed in
router.get('/scale/:id', (req, res) => {
    const scaleId = req.params.id
    const loggedIn = req.session.loggedIn
    const displayName = req.session.username
    Scale.findById(scaleId)
        .then(scale => {
        //   res.json(assignment)
        //     const userId = req.session.userId
        //     const username = req.session.username
             res.render('assignment/scaleShow', { scale, loggedIn, displayName})
         })
        .catch(err => {
            res.json(err)
        })
})

module.exports = router
